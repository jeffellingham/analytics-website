Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000
ii. Hours = 1562
iii. Category = 2643
iv. Attribute = 1115
v. Review = id = 10000
            user_id= 9581
            business_id = 8090
vi. Checkin = 493
vii. Photo = id = 10000
             business_id = 6493
viii. Tip = business_id = 3979
            user_id = 537
ix. User = 10000
x. Friend = 11
xi. Elite_years = 2870

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: No
	
	
	SQL code used to arrive at answer:
- I figured I should show it all in one query, so it's pretty chunky

SELECT *    
FROM user
WHERE id IS NULL OR name IS NULL OR review_count IS NULL OR yelping_since IS NULL
    OR useful IS NULL OR funny IS NULL OR cool IS NULL OR fans IS NULL OR 
    average_stars IS NULL OR compliment_hot IS NULL OR compliment_more IS NULL OR 
    compliment_profile IS NULL OR compliment_cute IS NULL OR compliment_list IS NULL OR 
    compliment_note IS NULL OR compliment_plain IS NULL OR compliment_cool IS NULL OR
    compliment_funny IS NULL OR compliment_writer IS NULL OR compliment_photos IS NULL
	
	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min: 1		max: 5		avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000		avg: 24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:

SELECT city
    , SUM(review_count) as reviews
FROM business
GROUP BY city
ORDER BY reviews DESC
	
	Copy and Paste the Result Below:
+-----------------+---------+
| city            | reviews |
+-----------------+---------+
| Las Vegas       |   82854 |
| Phoenix         |   34503 |
| Toronto         |   24113 |
| Scottsdale      |   20614 |
| Charlotte       |   12523 |
| Henderson       |   10871 |
| Tempe           |   10504 |
| Pittsburgh      |    9798 |
| Montréal        |    9448 |
| Chandler        |    8112 |
| Mesa            |    6875 |
| Gilbert         |    6380 |
| Cleveland       |    5593 |
| Madison         |    5265 |
| Glendale        |    4406 |
| Mississauga     |    3814 |
| Edinburgh       |    2792 |
| Peoria          |    2624 |
| North Las Vegas |    2438 |
| Markham         |    2352 |
| Champaign       |    2029 |
| Stuttgart       |    1849 |
| Surprise        |    1520 |
| Lakewood        |    1465 |
| Goodyear        |    1155 |
+-----------------+---------+
(Output limit exceeded, 25 of 362 total rows shown)
	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

SELECT stars
    , count(distinct id) as count
FROM business
WHERE city = 'Avon' 
GROUP BY stars

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
+-------+-------+
| stars | count |
+-------+-------+
|   1.5 |     1 |
|   2.5 |     2 |
|   3.5 |     3 |
|   4.0 |     2 |
|   4.5 |     1 |
|   5.0 |     1 |
+-------+-------+

ii. Beachwood

SQL code used to arrive at answer:

SELECT stars
    , count(distinct id) as count
FROM business
WHERE city = 'Beachwood'
GROUP BY stars

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
+-------+-------+
| stars | count |
+-------+-------+
|   2.0 |     1 |
|   2.5 |     1 |
|   3.0 |     2 |
|   3.5 |     2 |
|   4.0 |     1 |
|   4.5 |     2 |
|   5.0 |     5 |
+-------+-------+		


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	
SELECT name
    , review_count
FROM user
ORDER BY review_count DESC
LIMIT 3;
		
	Copy and Paste the Result Below:
+--------+--------------+
| name   | review_count |
+--------+--------------+
| Gerald |         2000 |
| Sara   |         1629 |
| Yuri   |         1339 |
+--------+--------------+	


8. Does posing more reviews correlate with more fans?
I'd say there's a low positive correlation between more reviews and more fans.

	Please explain your findings and interpretation of the results:
Since I couldn't use SQL syntax to do a correlation formula, I first took the top 12 users with the most reviews and their corresponding fans count and got a correlation of 0.03897. Next, I took the top 12 users by fans count and found a correlation of 0.12379 with their corresponding reviews_count. Then, I took all 25 outputted combinations (by users with the most fans) and got a correlation of 0.27295. 
I'd feel more confident if I could've used all the data to find the correlation, though seeing the correlation increase in positivity as I increased the number of variables gives me confidence that it's a positive correlation, even if an extremely low one.

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: Love
There's almost 10x as many reviews with love in them than hate.
	
	SQL code used to arrive at answer:

SELECT COUNT(distinct text), 
    CASE WHEN text LIKE '%love%' AND text LIKE '%hate%' THEN 'both'
    WHEN text LIKE '%hate%' THEN 'hate' 
    WHEN text LIKE '%love%' THEN 'love' 
    END sentiment
FROM review
GROUP BY sentiment;
	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:

SELECT name
    , fans
FROM user
ORDER BY fans DESC
LIMIT 10;
	
	Copy and Paste the Result Below:
+-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
+-----------+------+
	


Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?
- I did Restaurants in Toronto. There's 3 in the upper star rating group and 3 in the lower, and I definitely see a different distribution between the two groups. 
- The higher rated restaurants seem more like fine-dining establishments. Two only serve dinner, not opening until 6pm (earlier on the weekend), and one of them is only open 5 hours per day and 5 days per week (closed Mon/Tue). 
- However the third higher rated restaurant, "Sushi Osaka," has hours similar to the lower rated restaurants, they're all open 7 days per week, open in time for lunch at 9, 10:30, or 11am, and close at 9 or 11 at night. 

ii. Do the two groups you chose to analyze have a different number of reviews?
- Yes, the higher rated resturants had more than twice as many reviews (89 lower to 206 higher)
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.
- Kind of, though it's hard to be confident without more context and knowledge of the city. The 3 lower rated restaurants 2 are in "Downtown Core" and the third in "Entertainment District," making these sound like prime locations for fast food and/or walk-in customers.
- Whereas the 4 higher rated restaurants with neighborhood data, they're in places with more prestigious sounding names: "High Park," "Etobicoke," "Willowdale," and "Niagara." The names, High Park in particular, sound like places with restaurants that you'd have to make reservations to be able to get a table.
- There's A LOT of assumption baked into these guesses, though the names do lend themselves toward the assumptions.


SQL code used for analysis:
- For question i. on distribution of hours:
SELECT b.city, b.name, c.category, h.hours,
    CASE WHEN stars BETWEEN 2 AND 3.9 THEN 'lower'
    WHEN stars >= 4 THEN 'higher'
    END star_rating
FROM business as b
    INNER JOIN category as c ON b.id = c.business_id
    INNER JOIN hours as h ON b.id = h.business_id
WHERE b.city = 'Toronto' AND c.category = 'Restaurants' AND stars > 1.5
    AND star_rating = 'higher' --or lower, I had to switch to see all of the output per group
ORDER BY b.name

- For ii. on number of reviews
SELECT b.city, c.category, SUM(b.review_count),
    CASE WHEN stars BETWEEN 2 AND 3.9 THEN 'lower'
    WHEN stars >= 4 THEN 'higher'
    END star_rating
FROM business as b
    INNER JOIN category as c ON b.id = c.business_id
WHERE b.city = 'Toronto' AND c.category = 'Restaurants' AND stars > 1.5
GROUP BY star_rating

- For iii. on location data
SELECT b.city, b.name, c.category, b.neighborhood, b.postal_code,
    CASE WHEN stars BETWEEN 2 AND 3.9 THEN 'lower'
    WHEN stars >= 4 THEN 'higher'
    END star_rating
FROM business as b
    INNER JOIN category as c ON b.id = c.business_id
WHERE b.city = 'Toronto' AND c.category = 'Restaurants' AND stars > 1.5
order by star_rating
		

2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		

i. Difference 1:
The biggest difference I've found yet is whether the business has a photo or not. Of the businesses that have a photo, there's nearly 9x (!) as many businesses open as those that are closed (585 open businesses have photo vs 66 closed have photo.)
Also, the open businesses with a photo have 230000 reviews vs 4900 for the closed ones with photo (averaging 394 vs 75 per store).
         
ii. Difference 2:
The next biggest difference, which I alluded to in the first, is how many reviews the business has. While the overall review count difference isn't as drastic as between those with photos, it's still significant. On average, closed businesses have 23 reviews vs 32 for the open businesses.
         
         
SQL code used for analysis:
- For Difference 1:
SELECT b.is_open
    , SUM(b.review_count)
    , AVG(b.review_count)
    , COUNT(b.id)
    , AVG(b.stars)
FROM business as b
    INNER JOIN photo as p ON b.id = p.business_id
GROUP BY is_open

- For Difference 2:
SELECT is_open
    , COUNT(distinct id) as ct
    , SUM(review_count)
    , AVG(review_count)
FROM business
GROUP BY is_open
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:

I decided to cluster the businesses to find commonalities, differences, and anomalies. 
I first grouped the business into 3 groups based on their star rating (1-2.5, 3-4, and 4.5+), then further segregated the data by grouping it into 8 different groups based on the number of reviews each business had. I then had average number of reviews and stars per group, the total number of businesses and business with photos per group, and the percent of each group to have a photo.
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:

I will primarily be using the business table because it has the majority of the data I'll need for my analysis, including the businesses and their star ratings, number of reviews, and ids to join to other tables of interest. While I tried joining the business table to a variety of other tables to find interesting insights, the only one that provided worthwhile additional data was the photo table. I chose the photo table because of how impactful having a photo can be on their star rating and number of reviews, not to mention whether the business is still open or not as I saw in the previous question.

The most interesting insights this analysis provided were:
    - Average star rating increased as the number of reviews increased EXCEPT in the highest rated group where the average rating DROPPED as the number of reviews increased. The number of businesses with a high rating also dropped as reviews increased.
        - So it's harder to keep a high rating as you get more reviews.
    - The number of businesses with the lowest ratings DROPPED as the number of reviews increased. 
        - So the more reviews you get, the more likely you'll get at least a middling rating.
    - The number of businesses to have a photo increased as the number of reviews increased. 
        - Except for the lowest rated businesses, where virtually none had photos regardless of review count.
    - The number of businesses still open also increased as the number of reviews increased.
                  
iii. Output of your finished dataset:

+----------------+-----------------+-------------+-----------+-------+-----------+------------+-----------+
| rate_groups    | review_groups   | avg_reviews | avg_stars | count | has_photo | photo_perc | open_perc |
+----------------+-----------------+-------------+-----------+-------+-----------+------------+-----------+
| 1 - 2.5 rating | 1-5 reviews     |        3.69 |       2.0 |   718 |         3 | 0.42%      | 84.4%     |
| 1 - 2.5 rating | 6-10 reviews    |        7.58 |       2.1 |   461 |         9 | 1.95%      | 82.65%    |
| 1 - 2.5 rating | 11-25 reviews   |       15.95 |      2.17 |   379 |        16 | 4.22%      | 82.06%    |
| 1 - 2.5 rating | 26-50 reviews   |       34.47 |      2.27 |   178 |        13 | 7.3%       | 86.52%    |
| 1 - 2.5 rating | 51-100 reviews  |       70.74 |       2.3 |    66 |        10 | 15.15%     | 83.33%    |
| 1 - 2.5 rating | 101-150 reviews |      129.38 |      2.27 |    13 |         1 | 7.69%      | 76.92%    |
| 1 - 2.5 rating | 151-300 reviews |      168.67 |       2.5 |     3 |         0 | 0.0%       | 100.0%    |
| 1 - 2.5 rating | 300+ reviews    |      465.14 |      2.29 |     7 |         0 | 0.0%       | 71.43%    |
| 3 - 4 rating   | 1-5 reviews     |        3.88 |      3.55 |  1424 |        12 | 0.84%      | 81.88%    |
| 3 - 4 rating   | 6-10 reviews    |        7.72 |      3.55 |  1006 |        21 | 2.09%      | 82.5%     |
| 3 - 4 rating   | 11-25 reviews   |       16.55 |      3.53 |  1163 |        36 | 3.1%       | 82.03%    |
| 3 - 4 rating   | 26-50 reviews   |       35.89 |      3.54 |   697 |        79 | 11.33%     | 83.07%    |
| 3 - 4 rating   | 51-100 reviews  |       71.71 |       3.6 |   465 |        74 | 15.91%     | 80.22%    |
| 3 - 4 rating   | 101-150 reviews |       122.2 |      3.61 |   202 |        44 | 21.78%     | 89.11%    |
| 3 - 4 rating   | 151-300 reviews |      211.38 |      3.68 |   194 |        63 | 32.47%     | 89.69%    |
| 3 - 4 rating   | 300+ reviews    |      968.54 |      3.81 |   180 |       125 | 69.44%     | 97.22%    |
| 4.5+ rating    | 1-5 reviews     |        3.72 |      4.85 |  1128 |         4 | 0.35%      | 87.32%    |
| 4.5+ rating    | 6-10 reviews    |        7.55 |      4.75 |   713 |        14 | 1.96%      | 87.66%    |
| 4.5+ rating    | 11-25 reviews   |       16.01 |      4.72 |   606 |        10 | 1.65%      | 91.58%    |
| 4.5+ rating    | 26-50 reviews   |       36.31 |      4.67 |   297 |        15 | 5.05%      | 90.24%    |
| 4.5+ rating    | 51-100 reviews  |       70.29 |      4.63 |   145 |        18 | 12.41%     | 95.17%    |
| 4.5+ rating    | 101-150 reviews |      123.42 |      4.57 |    53 |         8 | 15.09%     | 90.57%    |
| 4.5+ rating    | 151-300 reviews |      210.94 |      4.54 |    54 |        23 | 42.59%     | 96.3%     |
| 4.5+ rating    | 300+ reviews    |      771.99 |       4.5 |    74 |        53 | 71.62%     | 94.59%    |
+----------------+-----------------+-------------+-----------+-------+-----------+------------+-----------+
         
iv. Provide the SQL code you used to create your final dataset:

SELECT CASE WHEN stars <= 2.5 THEN '1 - 2.5 rating' 
    WHEN stars <= 4 THEN '3 - 4 rating'
    ELSE '4.5+ rating' END rate_groups,
    CASE WHEN review_count <= 5 THEN '1-5 reviews'
    WHEN review_count <= 10 THEN '6-10 reviews'
    WHEN review_count <= 25 THEN '11-25 reviews'
    WHEN review_count <= 50 THEN '26-50 reviews'
    WHEN review_count <= 100 THEN '51-100 reviews'
    WHEN review_count <= 150 THEN '101-150 reviews'
    WHEN review_count <= 300 THEN '151-300 reviews'
    ELSE '300+ reviews' END review_groups, 
    ROUND(AVG(review_count),2) as avg_reviews, 
    ROUND(AVG(stars),2) as avg_stars, 
    COUNT(*) as count, 
    COUNT(p.business_id) as has_photo, 
    ROUND(((cast(COUNT(p.business_id) as FLOAT) / 
        cast(COUNT(*) as FLOAT)) * 100),2)||'%'  AS photo_perc,
    ROUND(((cast(SUM(is_open) as FLOAT) / 
        cast(COUNT(*) as FLOAT)) * 100),2)||'%' AS open_perc
FROM business AS b
    LEFT JOIN photo AS p ON b.id = p.business_id
--WHERE is_open = 1
GROUP BY review_groups, rate_groups
ORDER BY rate_groups, avg_reviews

